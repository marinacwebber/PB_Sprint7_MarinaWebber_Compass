{
	"info": {
		"_postman_id": "e6b76caf-77af-4277-82a5-137f177e2b82",
		"name": "ServeRestTestes",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30065285"
	},
	"item": [
		{
			"name": "/login Copy",
			"item": [
				{
					"name": "POST/login-admin-sc200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Criando usuário\r",
									"var nome = pm.environment.get('mass_userName')\r",
									"var email = pm.environment.get('mass_userEmail')\r",
									"var password = pm.environment.get('mass_userPassword')\r",
									"var administrador = 'true'\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'application/json',\r",
									"        raw: JSON.stringify({\r",
									"            nome,\r",
									"            email,\r",
									"            password,\r",
									"            administrador\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try {\r",
									"        pm.environment.set('mass_userId', response.json()._id);\r",
									"    } catch {\r",
									"        console.warn('FAIL');\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()\r",
									"pm.environment.set(\"auth-token\", data.authorization)\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is 'Login realizado com sucesso'\", function () {\r",
									"    pm.expect(responseJson.message).to.eql(\"Login realizado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Authorization is present\", function () {\r",
									"    pm.expect(responseJson.authorization).to.exist;\r",
									"});\r",
									"\r",
									"// excluindo usuário criado\r",
									"const deleteRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios/${pm.environment.get('mass_userId')}`,\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': `${pm.environment.get('auth-token')}`\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(deleteRequest, (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try {\r",
									"        pm.environment.set('mass_userId', response.json()._id);\r",
									"    } catch {\r",
									"        console.warn('FAIL');\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{mass_userEmail}}\",\r\n    \"password\": \"{{mass_userPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST/login-admin-sc400-Formato-Email-Incorreto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); \r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is present\", function () {\r",
									"    pm.expect(responseJson.email).is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Email validation error message\", function () {\r",
									"    pm.expect(responseJson.email).to.eql(\"email deve ser um email válido\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"fulano@qacom\",\r\n    \"password\": \"teste\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST/login-admin-sc400-Formato-Email-Incorreto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); \r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is present\", function () {\r",
									"    pm.expect(responseJson.email).is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Email validation error message\", function () {\r",
									"    pm.expect(responseJson.email).to.eql(\"email deve ser um email válido\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"fulanoqa.com\",\r\n    \"password\": \"teste\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST/login-admin-sc400-Email-em-Branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); \r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is present\", function () {\r",
									"    pm.expect(responseJson.email).is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Email validation error message\", function () {\r",
									"    pm.expect(responseJson.email).to.eql(\"email não pode ficar em branco\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"teste\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST/login-admin-sc401-Email-Senha-Invalidos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()\r",
									"pm.environment.set(\"auth-token\", data.authorization)\r",
									"\r",
									"let responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is present\", function () {\r",
									"    pm.expect(responseJson.message).is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Email e/ou senha inválidos'\", function () {\r",
									"    pm.expect(responseJson.message).to.eql(\"Email e/ou senha inválidos\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"ulano@qa.com\",\r\n    \"password\": \"teste\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST/login-admin-sc401-Email-Senha-Invalidos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()\r",
									"pm.environment.set(\"auth-token\", data.authorization)\r",
									"\r",
									"let responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is present\", function () {\r",
									"    pm.expect(responseJson.message).is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Email e/ou senha inválidos'\", function () {\r",
									"    pm.expect(responseJson.message).to.eql(\"Email e/ou senha inválidos\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"fulano@qa.com\",\r\n    \"password\": \"este\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST/login-admin-sc503",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()\r",
									"pm.environment.set(\"auth-token\", data.authorization)\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"// Validações abaixo estão prontas para uma futura implementação\r",
									"// Segindo os critérios de aceite do challenge\r",
									"pm.test(\"Status code is 503\", function () {\r",
									"    pm.response.to.have.status(503);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is 'O sistema está temporariamente indisponível. Tente novamente mais tarde.'\", function () {\r",
									"    pm.expect(responseJson.message).to.eql(\"O sistema está temporariamente indisponível. Tente novamente mais tarde.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Authorization is present\", function () {\r",
									"    pm.expect(responseJson.authorization).to.exist;\r",
									"});\r",
									"\r",
									"// excluindo usuário criado\r",
									"const deleteRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios/${pm.environment.get('mass_userId')}`,\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': `${pm.environment.get('auth-token')}`\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(deleteRequest, (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try {\r",
									"        pm.environment.set('mass_userId', response.json()._id);\r",
									"    } catch {\r",
									"        console.warn('FAIL');\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Criando usuário\r",
									"var nome = pm.environment.get('mass_userName')\r",
									"var email = pm.environment.get('mass_userEmail')\r",
									"var password = pm.environment.get('mass_userPassword')\r",
									"var administrador = 'true'\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'application/json',\r",
									"        raw: JSON.stringify({\r",
									"            nome,\r",
									"            email,\r",
									"            password,\r",
									"            administrador\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try {\r",
									"        pm.environment.set('mass_userId', response.json()._id);\r",
									"    } catch {\r",
									"        console.warn('FAIL');\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{mass_userEmail}}\",\r\n    \"password\": \"{{mass_userPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			],
			"description": "[https://serverest.dev/login](https://serverest.dev/)"
		},
		{
			"name": "/usuarios Copy",
			"item": [
				{
					"name": "POST/usuarios-cadastro-sc201",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"mass_userId\", responseJson._id)\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); \r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is 'Cadastro realizado com sucesso'\", function () {\r",
									"    pm.expect(responseJson.message).to.eql(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Id is not empty\", function () {\r",
									"    pm.expect(responseJson._id).is.not.empty;\r",
									"});\r",
									"\r",
									"// criando requisição para login\r",
									"const tokenRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/login`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'application/json',\r",
									"        raw: JSON.stringify({\r",
									"            email: pm.environment.get('mass_userEmail'),\r",
									"            password: pm.environment.get('mass_userPassword')\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"// disparando requisição de login (para excluir usuário)\r",
									"pm.sendRequest(tokenRequest, (err, response) => {\r",
									"    pm.environment.set('auth-token', response.json().authorization)\r",
									"    // criando requisição para excluir usuário\r",
									"    const deleteRequest = {\r",
									"        url: `${pm.environment.get('baseUrl')}/usuarios/${pm.environment.get('mass_userId')}`,\r",
									"        method: 'DELETE',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': `${pm.environment.get('auth-token')}`\r",
									"        }\r",
									"    };\r",
									"    // disparando requisição para excluir usuário\r",
									"    pm.sendRequest(deleteRequest, (err, response) => { });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"nome\": \"{{mass_userName}}\",\r\n  \"email\": \"{{mass_userEmail}}\",\r\n  \"password\": \"{{mass_userPassword}}\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST/usuarios-cadastro-sc201-padrao",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"\r",
									"pm.environment.set(\"mass_userId\", response._id); \r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); \r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Message is 'Cadastro realizado com sucesso'\", function () {\r",
									"    pm.expect(response.message).to.eql(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Id is not empty\", function () {\r",
									"    pm.expect(response._id).is.not.empty;\r",
									"});\r",
									"\r",
									"// obtendo token para excluir usuário\r",
									"const tokenRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/login`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'application/json',\r",
									"        raw: JSON.stringify({\r",
									"            email: pm.environment.get('mass_userEmail'),\r",
									"            password: pm.environment.get('mass_userPassword')\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(tokenRequest, (err, response) => {\r",
									"    pm.environment.set('auth-token', pm.response.json.authorization)\r",
									"    // Excluindo usuário criado\r",
									"    const deleteRequest = {\r",
									"        url: `${pm.environment.get('baseUrl')}/usuarios/${pm.environment.get('mass_userId')}`,\r",
									"        method: 'DELETE',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': `${pm.environment.get('auth-token')}`\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(deleteRequest, (err, response) => {\r",
									"        console.log(err ? err : response.json());\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{mass_userName}}\",\r\n  \"email\": \"{{mass_userEmail}}\",\r\n  \"password\": \"{{mass_userPassword}}\",\r\n  \"administrador\": \"false\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST/usuarios-cadastro-sc400-Email-sendo-usado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); \r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is present\", function () {\r",
									"    pm.expect(responseJson.message).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Email already in use error message\", function () {\r",
									"    pm.expect(responseJson.message).to.eql(\"Este email já está sendo usado\");\r",
									"});\r",
									"\r",
									"// excluindo usuário cadastrado\r",
									"// obtendo token\r",
									"const tokenRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/login`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'application/json',\r",
									"        raw: JSON.stringify({\r",
									"            email: pm.environment.get('mass_userEmail'),\r",
									"            password: pm.environment.get('mass_userPassword')\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(tokenRequest, (err, response) => {\r",
									"    pm.environment.set('auth-token', pm.response.json.authorization)\r",
									"    // Excluindo usuário criado aleatoriamente para os testes de cadastro de usuário\r",
									"    const deleteRequest = {\r",
									"        url: `${pm.environment.get('baseUrl')}/usuarios/${pm.environment.get('mass_userId')}`,\r",
									"        method: 'DELETE',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': `${pm.environment.get('auth-token')}`\r",
									"        }\r",
									"    };\r",
									"    pm.sendRequest(deleteRequest, (err, response) => { });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Criando usuário\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'application/json',\r",
									"        raw: JSON.stringify({\r",
									"            nome: pm.environment.get('mass_userName'),\r",
									"            email: pm.environment.get('mass_userEmail'),\r",
									"            password: pm.environment.get('mass_userPassword'),\r",
									"            administrador: 'true'\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (err, response) => {\r",
									"    pm.environment.set('mass_userId', response.json()._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{email-admin}}\",\r\n  \"password\": \"{{$randomInt}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST/usuarios-cadastro-sc400-Nome-em-Branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); \r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is present\", function () {\r",
									"    pm.expect(responseJson.nome).is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Name validation error message\", function () {\r",
									"    pm.expect(responseJson.nome).to.eql(\"nome não pode ficar em branco\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"nome\": \"\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomInt}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST/usuarios-cadastro-sc400-Email-em-Branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); \r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is present\", function () {\r",
									"    pm.expect(responseJson.email).is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Email validation error message\", function () {\r",
									"    pm.expect(responseJson.email).to.eql(\"email não pode ficar em branco\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"\",\r\n  \"password\": \"{{$randomInt}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST/usuarios-cadastro-sc400-Password-em-Branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); \r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is present\", function () {\r",
									"    pm.expect(responseJson.password).is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Password validation error message\", function () {\r",
									"    pm.expect(responseJson.password).to.eql(\"password não pode ficar em branco\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST/usuarios-cadastro-sc400-Email-Invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); \r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error email is present\", function () {\r",
									"    pm.expect(responseJson.email).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Error message when using invalid email\", function () {\r",
									"    pm.expect(responseJson.email).to.eql(\"email deve ser um email válido\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomFirstName}}\",\r\n  \"password\": \"{{$randomInt}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST/usuarios-cadastro-sc400-Senha-não-Aceita",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); \r",
									"});\r",
									"\r",
									"//Validações abaixo estão prontas para uma futura implementação\r",
									"//\"senha deve conter no mínimo 5 caracteres e no máximo de 10 caracteres\"\r",
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is present\", function () {\r",
									"    pm.expect(responseJson.password).is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Password less than 5 or more than 10 characters\", function () {\r",
									"    pm.expect(responseJson.password).to.eql(\"password less than 5 or more than 10 characters\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"1234\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST/usuarios-cadastro-sc400-Email-Invalido-Provedor-Gmail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); \r",
									"});\r",
									"\r",
									"//Validações abaixo estão prontas para uma futura implementação\r",
									"//\"Não é possível cadastrar usuários com e-mails de provedor gmail e hotmail\"\r",
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is present\", function () {\r",
									"    pm.expect(responseJson.email).is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Email validation error message\", function () {\r",
									"    pm.expect(responseJson.email).to.eql(\"Não é possível cadastrar usuários com e-mails de provedor gmail e hotmail\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"nome\": \"{{$randomFirstName}}\",\r\n  \"email\": \"batata1234@gmail.com\",\r\n  \"password\": \"{{$randomInt}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT/usuarios-editar-sc200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Success message is 'Registro alterado com sucesso'\", function () {\r",
									"    pm.expect(responseJson.message).to.eql(\"Registro alterado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Returned ID matches the requested ID\", function () {\r",
									"    const requestedId = pm.request.url.query.get(\"_id\")\r",
									"    pm.expect(responseJson.id).to.eql(requestedId);\r",
									"});\r",
									"\r",
									"pm.test(\"Attributes of updated user matches request attributes\", function () {\r",
									"    var updatedUser = {nome: 'fff'}\r",
									"    const getUserByIdRequest = {\r",
									"        url: `${pm.environment.get('baseUrl')}/usuarios/${pm.environment.get('mass_userId')}`,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': `${pm.environment.get('auth-token')}`\r",
									"        }\r",
									"    }\r",
									"    pm.sendRequest(getUserByIdRequest, (err, response) => {\r",
									"        updatedUser = response.json()\r",
									"        pm.expect(updatedUser.nome).to.eql('Robert Plant da Silva')\r",
									"        pm.expect(updatedUser.email).to.eql('robert.plant.silva@qa.com')\r",
									"        pm.expect(updatedUser.password).to.eql('Senha123@')\r",
									"        pm.expect(updatedUser.administrador).to.eql('true')\r",
									"    })\r",
									"});\r",
									"\r",
									"// excluindo usuário criado\r",
									"const deleteRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios/${pm.environment.get('mass_userId')}`,\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': `${pm.environment.get('auth-token')}`\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(deleteRequest, (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try {\r",
									"        pm.environment.set('mass_userId', response.json()._id);\r",
									"    } catch {\r",
									"        console.warn('FAIL');\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Criando usuário\r",
									"var nome = pm.environment.get('mass_userName')\r",
									"var email = pm.environment.get('mass_userEmail')\r",
									"var password = pm.environment.get('mass_userPassword')\r",
									"var administrador = 'true'\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'application/json',\r",
									"        raw: JSON.stringify({\r",
									"            nome,\r",
									"            email,\r",
									"            password,\r",
									"            administrador\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (err, response) => {\r",
									"    pm.environment.set('mass_userId', response.json()._id);\r",
									"    // gerando token\r",
									"    const tokenRequest = {\r",
									"        url: `${pm.environment.get('baseUrl')}/login`,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'application/json',\r",
									"            raw: JSON.stringify({\r",
									"                email: pm.environment.get('mass_userEmail'),\r",
									"                password: pm.environment.get('mass_userPassword')\r",
									"            })\r",
									"        }\r",
									"    }\r",
									"    pm.sendRequest(tokenRequest, (err, response) => {\r",
									"        pm.environment.set('auth-token', response.json().authorization)\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"Robert Plant da Silva\",\r\n    \"email\": \"robert.plant.silva@qa.com\",\r\n    \"password\": \"Senha123@\",\r\n    \"administrador\": \"false\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/{{mass_userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"{{mass_userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT/usuarios-editar-sc201-NovoID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"ID in response matches the requested ID\", function () {\r",
									"    const requestedId = pm.variables.get(\"randomInt\");\r",
									"    pm.expect(responseJson.id).to.not.eql(null);\r",
									"    pm.expect(responseJson.id).to.eql(requestedId);\r",
									"});\r",
									"\r",
									"pm.test(\"Success message is 'Cadastro realizado com sucesso'\", function () {\r",
									"    pm.expect(responseJson.message).to.eql(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"// excluindo usuários cadastrados\r",
									"const deleteRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios/${pm.environment.get('mass_userIdExtra')}`,\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': `${pm.environment.get('auth-token')}`\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(deleteRequest, (err, response) => {\r",
									"    pm.environment.set('mass_userId', response.json()._id);\r",
									"});\r",
									"\r",
									"const deleteRequest2 = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios/${pm.environment.get('mass_userId')}`,\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': `${pm.environment.get('auth-token')}`\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(deleteRequest2, (err, response) => {\r",
									"    pm.environment.set('mass_userId', response.json()._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// criando um id aleatorio\r",
									"pm.environment.set('mass_userIdExtra', Math.floor(Math.random() * 100000000))\r",
									"\r",
									"// Criando usuário para login\r",
									"var nome = pm.environment.get('mass_userName')\r",
									"var email = pm.environment.get('mass_userEmail')\r",
									"var password = pm.environment.get('mass_userPassword')\r",
									"var administrador = 'true'\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'application/json',\r",
									"        raw: JSON.stringify({\r",
									"            nome,\r",
									"            email,\r",
									"            password,\r",
									"            administrador\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (err, response) => {\r",
									"    pm.environment.set('mass_userId', response.json()._id);\r",
									"    // obtendo token\r",
									"    const tokenRequest = {\r",
									"        url: `${pm.environment.get('baseUrl')}/login`,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'application/json',\r",
									"            raw: JSON.stringify({\r",
									"                email: pm.environment.get('mass_userEmail'),\r",
									"                password: pm.environment.get('mass_userPassword')\r",
									"            })\r",
									"        }\r",
									"    }\r",
									"\r",
									"    pm.sendRequest(tokenRequest, (err, response) => {\r",
									"        pm.environment.set('auth-token', response.json().authorization)\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFileName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/{{mass_userIdExtra}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"{{mass_userIdExtra}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT/usuarios-editar-sc400-Obrigatoriedade-campos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Nome validation error message\", function () {\r",
									"    pm.expect(responseJson.nome).to.eql(\"nome não pode ficar em branco\");\r",
									"});\r",
									"\r",
									"pm.test(\"Email validation error message\", function () {\r",
									"    pm.expect(responseJson.email).to.eql(\"email não pode ficar em branco\");\r",
									"});\r",
									"\r",
									"pm.test(\"Password validation error message\", function () {\r",
									"    pm.expect(responseJson.password).to.eql(\"password não pode ficar em branco\");\r",
									"});\r",
									"\r",
									"pm.test(\"Administrador validation error message\", function () {\r",
									"    pm.expect(responseJson.administrador).to.eql(\"administrador deve ser 'true' ou 'false'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"\",\r\n  \"email\": \"\",\r\n  \"password\": \"\",\r\n  \"administrador\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/{{email-admin}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"{{email-admin}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT/usuarios-editar-sc400-Email-sendo-usado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); \r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Este email já está sendo usado'\", function () {\r",
									"    pm.expect(responseJson.message).to.eql(\"Este email já está sendo usado\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// excluindo usuário criado\r",
									"const deleteRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios/${pm.environment.get('mass_userId')}`,\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': `${pm.environment.get('auth-token')}`\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(deleteRequest, (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try {\r",
									"        pm.environment.set('mass_userId', response.json()._id);\r",
									"    } catch {\r",
									"        console.warn('FAIL');\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Criando usuário\r",
									"var nome = pm.environment.get('mass_userName')\r",
									"var email = pm.environment.get('mass_userEmail')\r",
									"var password = pm.environment.get('mass_userPassword')\r",
									"var administrador = 'true'\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'application/json',\r",
									"        raw: JSON.stringify({\r",
									"            nome,\r",
									"            email,\r",
									"            password,\r",
									"            administrador\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (err, response) => {\r",
									"    pm.environment.set('mass_userId', response.json()._id);\r",
									"    // gerando token\r",
									"    const tokenRequest = {\r",
									"        url: `${pm.environment.get('baseUrl')}/login`,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'application/json',\r",
									"            raw: JSON.stringify({\r",
									"                email: pm.environment.get('mass_userEmail'),\r",
									"                password: pm.environment.get('mass_userPassword')\r",
									"            })\r",
									"        }\r",
									"    }\r",
									"    pm.sendRequest(tokenRequest, (err, response) => {\r",
									"        pm.environment.set('auth-token', response.json().authorization)\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Paulo de Sá\",\r\n  \"email\": \"beltrano@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/{{mass_userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"{{mass_userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET/usuarios-listar-sc200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"pm.expect(pm.response.text()).to.include('quantidade', 'usuarios');\r",
									"});\r",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r",
									"const attributes = ['quantidade', 'usuarios'];\r",
									"\r",
									"attributes.forEach((attribute) => {\r",
									"    pm.test(`Response contains attribute \"${attribute}\"`, () => {\r",
									"        pm.expect(responseJson).to.have.property(attribute);\r",
									"    });\r",
									"});\r",
									"\r",
									"// excluindo usuário cadastrado\r",
									"const deleteRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios/${pm.environment.get('mass_userId')}`,\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': `${pm.environment.get('auth-token')}`\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(deleteRequest, (err, response) => {\r",
									"    pm.environment.set('mass_userId', response.json()._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Criando usuário\r",
									"var nome = pm.environment.get('mass_userName')\r",
									"var email = pm.environment.get('mass_userEmail')\r",
									"var password = pm.environment.get('mass_userPassword')\r",
									"var administrador = 'true'\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'application/json',\r",
									"        raw: JSON.stringify({\r",
									"            nome,\r",
									"            email,\r",
									"            password,\r",
									"            administrador\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (err, response) => {\r",
									"    pm.environment.set('mass_userId', response.json()._id);\r",
									"    // obtendo token\r",
									"    const tokenRequest = {\r",
									"        url: `${pm.environment.get('baseUrl')}/login`,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'application/json',\r",
									"            raw: JSON.stringify({\r",
									"                email: pm.environment.get('mass_userEmail'),\r",
									"                password: pm.environment.get('mass_userPassword')\r",
									"            })\r",
									"        }\r",
									"    }\r",
									"    pm.sendRequest(tokenRequest, (err, response) => {\r",
									"        pm.environment.set('auth-token', response.authorization)\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET/usuarios-buscarID-sc200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200); \r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const expectedAttributes = [\"nome\", \"email\", \"password\", \"administrador\", \"_id\"];\r",
									"\r",
									"pm.test(\"String contained in the body\", function () {\r",
									"    expectedAttributes.forEach((atributo) => {\r",
									"        pm.expect(pm.response.text()).to.include(atributo);\r",
									"    });\r",
									"});\r",
									"\r",
									"// excluindo usuário cadastrado\r",
									"const deleteRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios/${pm.environment.get('mass_userId')}`,\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': `${pm.environment.get('auth-token')}`\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(deleteRequest, (err, response) => {\r",
									"    pm.environment.set('mass_userId', response.json()._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Criando usuário\r",
									"var nome = pm.environment.get('mass_userName')\r",
									"var email = pm.environment.get('mass_userEmail')\r",
									"var password = pm.environment.get('mass_userPassword')\r",
									"var administrador = 'true'\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'application/json',\r",
									"        raw: JSON.stringify({\r",
									"            nome,\r",
									"            email,\r",
									"            password,\r",
									"            administrador\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (err, response) => {\r",
									"    pm.environment.set('mass_userId', response.json()._id);\r",
									"    // obtendo token\r",
									"    const tokenRequest = {\r",
									"        url: `${pm.environment.get('baseUrl')}/login`,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'application/json',\r",
									"            raw: JSON.stringify({\r",
									"                email: pm.environment.get('mass_userEmail'),\r",
									"                password: pm.environment.get('mass_userPassword')\r",
									"            })\r",
									"        }\r",
									"    }\r",
									"    pm.sendRequest(tokenRequest, (err, response) => {\r",
									"        pm.environment.set('auth-token', response.authorization)\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/{{mass_userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"{{mass_userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET/usuarios-lbuscarID-sc400-Usuario-não-encontrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400); \r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"error message when id is invalid\", function () {\r",
									"    pm.expect(responseJson.message).to.eql(\"Usuário não encontrado\");\r",
									"});\r",
									"\r",
									"// excluindo usuário cadastrado\r",
									"const deleteRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios/${pm.environment.get('mass_userId')}`,\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': `${pm.environment.get('auth-token')}`\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(deleteRequest, (err, response) => {\r",
									"    pm.environment.set('mass_userId', response.json()._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Criando usuário\r",
									"var nome = pm.environment.get('mass_userName')\r",
									"var email = pm.environment.get('mass_userEmail')\r",
									"var password = pm.environment.get('mass_userPassword')\r",
									"var administrador = 'true'\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'application/json',\r",
									"        raw: JSON.stringify({\r",
									"            nome,\r",
									"            email,\r",
									"            password,\r",
									"            administrador\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (err, response) => {\r",
									"    pm.environment.set('mass_userId', response.json()._id);\r",
									"    // obtendo token\r",
									"    const tokenRequest = {\r",
									"        url: `${pm.environment.get('baseUrl')}/login`,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'application/json',\r",
									"            raw: JSON.stringify({\r",
									"                email: pm.environment.get('mass_userEmail'),\r",
									"                password: pm.environment.get('mass_userPassword')\r",
									"            })\r",
									"        }\r",
									"    }\r",
									"    pm.sendRequest(tokenRequest, (err, response) => {\r",
									"        pm.environment.set('auth-token', response.authorization)\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/{{$randomInt}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"{{$randomInt}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE/usuarios-excluir-sc200-Registro-Excluido-Sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test('Response contains \"message\" attribute and includes \"Registro excluído com sucesso\"', function () {\r",
									"    pm.expect(responseJson).to.have.property('message');\r",
									"    pm.expect(responseJson.message).to.include('Registro excluído com sucesso');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Criando usuário\r",
									"var nome = pm.environment.get('mass_userName')\r",
									"var email = pm.environment.get('mass_userEmail')\r",
									"var password = pm.environment.get('mass_userPassword')\r",
									"var administrador = 'true'\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'application/json',\r",
									"        raw: JSON.stringify({\r",
									"            nome,\r",
									"            email,\r",
									"            password,\r",
									"            administrador\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (err, response) => {\r",
									"    pm.environment.set('mass_userId', response.json()._id);\r",
									"    // obtendo token\r",
									"    const tokenRequest = {\r",
									"        url: `${pm.environment.get('baseUrl')}/login`,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'application/json',\r",
									"            raw: JSON.stringify({\r",
									"                email: pm.environment.get('mass_userEmail'),\r",
									"                password: pm.environment.get('mass_userPassword')\r",
									"            })\r",
									"        }\r",
									"    }\r",
									"    pm.sendRequest(tokenRequest, (err, response) => {\r",
									"        pm.environment.set('auth-token', response.authorization)\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/{{mass_userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"{{mass_userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE/usuarios-excluir-sc200-Nenhum-Registro-Excluido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test('Response contains \"message\" attribute and includes \"Nenhum registro excluído\"', function () {\r",
									"    pm.expect(responseJson).to.have.property('message');\r",
									"    pm.expect(responseJson.message).to.include('Nenhum registro excluído');\r",
									"});\r",
									"\r",
									"// excluindo usuário cadastrado\r",
									"const deleteRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios/${pm.environment.get('mass_userId')}`,\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': `${pm.environment.get('auth-token')}`\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(deleteRequest, (err, response) => {\r",
									"    pm.environment.set('mass_userId', response.json()._id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Criando usuário\r",
									"var nome = pm.environment.get('mass_userName')\r",
									"var email = pm.environment.get('mass_userEmail')\r",
									"var password = pm.environment.get('mass_userPassword')\r",
									"var administrador = 'true'\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'application/json',\r",
									"        raw: JSON.stringify({\r",
									"            nome,\r",
									"            email,\r",
									"            password,\r",
									"            administrador\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (err, response) => {\r",
									"    pm.environment.set('mass_userId', response.json()._id);\r",
									"    // obtendo token\r",
									"    const tokenRequest = {\r",
									"        url: `${pm.environment.get('baseUrl')}/login`,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'application/json',\r",
									"            raw: JSON.stringify({\r",
									"                email: pm.environment.get('mass_userEmail'),\r",
									"                password: pm.environment.get('mass_userPassword')\r",
									"            })\r",
									"        }\r",
									"    }\r",
									"    pm.sendRequest(tokenRequest, (err, response) => {\r",
									"        pm.environment.set('auth-token', response.authorization)\r",
									"        });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/{{$randomInt}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"{{$randomInt}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE/usuarios-excluir-sc400-Usuario-Carrinho-Cadastrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 800ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test('Response contains \"idCarrinho\" attribute and includes \"Não é permitido excluir usuário com carrinho cadastrado\"', function () {\r",
									"    pm.expect(responseJson.idCarrinho).to.exist;\r",
									"    pm.expect(responseJson.message).to.include('Não é permitido excluir usuário com carrinho cadastrado');\r",
									"});\r",
									"\r",
									"// excluindo usuário cadastrado\r",
									"const deleteCartRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/carrinhos/concluir-compra`,\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': pm.environment.get('auth-token')\r",
									"    }\r",
									"};\r",
									"\r",
									"const deleteUserRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios/${pm.environment.get('mass_userId')}`,\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': pm.environment.get('auth-token')\r",
									"    }\r",
									"};\r",
									"\r",
									"const deleteProductRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/produtos/${pm.environment.get('mass_productId')}`,\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': pm.environment.get('auth-token')\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(deleteCartRequest, (err, response) => {\r",
									"    pm.sendRequest(deleteProductRequest, (err, response) => {\r",
									"        pm.sendRequest(deleteUserRequest, (err, response) => {\r",
									"        })\r",
									"    })       \r",
									"})\r",
									"\r",
									"// pm.sendRequest(deleteRequest, (err, response) => {\r",
									"//     console.log(err ? err : response.json());\r",
									"//     try {\r",
									"//         pm.environment.set('mass_userId', response.json()._id);\r",
									"//     } catch {\r",
									"//         console.warn('FAIL');\r",
									"//     }\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Criando usuário\r",
									"var nome = pm.environment.get('mass_userName')\r",
									"var email = pm.environment.get('mass_userEmail')\r",
									"var password = pm.environment.get('mass_userPassword')\r",
									"var administrador = 'true'\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${pm.environment.get('baseUrl')}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'application/json',\r",
									"        raw: JSON.stringify({\r",
									"            nome,\r",
									"            email,\r",
									"            password,\r",
									"            administrador\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(postRequest, (err, response) => {\r",
									"    pm.environment.set('mass_userId', response.json()._id);\r",
									"    const tokenRequest = {\r",
									"        url: `${pm.environment.get('baseUrl')}/login`,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'application/json',\r",
									"            raw: JSON.stringify({\r",
									"                email: pm.environment.get('mass_userEmail'),\r",
									"                password: pm.environment.get('mass_userPassword')\r",
									"            })\r",
									"        }\r",
									"    }\r",
									"    pm.sendRequest(tokenRequest, (err, response) => {\r",
									"        pm.environment.set('auth-token', response.json().authorization)\r",
									"        const productRequest = {\r",
									"            url: `${pm.environment.get('baseUrl')}/produtos`,\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"                'Authorization': pm.environment.get('auth-token')\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'application/json',\r",
									"                raw: JSON.stringify({\r",
									"                    nome: 'mouse 13232432',\r",
									"                    preco: 45,\r",
									"                    descricao: 'Mouse com numero aleatorio para evitar duplicados',\r",
									"                    quantidade: 1\r",
									"                })\r",
									"            }\r",
									"        }\r",
									"        pm.sendRequest(productRequest, (err, response) => {\r",
									"            pm.environment.set('mass_productId', response.json()._id)\r",
									"            const cartRequest = {\r",
									"                url: `${pm.environment.get('baseUrl')}/carrinhos`,\r",
									"                method: 'POST',\r",
									"                header: {\r",
									"                    'Content-Type': 'application/json',\r",
									"                    'Authorization': pm.environment.get('auth-token')\r",
									"                },\r",
									"                body: {\r",
									"                    mode: 'application/json',\r",
									"                    raw: JSON.stringify({\r",
									"                        produtos: [\r",
									"                            {\r",
									"                                idProduto: pm.environment.get('mass_productId'),\r",
									"                                quantidade: 1\r",
									"                            }\r",
									"                        ]\r",
									"                    })\r",
									"                }\r",
									"            }\r",
									"            pm.sendRequest(cartRequest, (err, response) => {\r",
									"                pm.environment.set('mass_cartId', response.json()._id)\r",
									"            })\r",
									"        })\r",
									"    })\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/{{mass_userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"{{mass_userId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}